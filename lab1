#Розв'язати алгебраїчне рівняння 4x^2 - 12 = 0 методом бісекції
def bisek1(a, b):
    i = 1
    while i < 100:
        c = (a + b) / 2
        y = 4 * c**2 - 12
        if abs(y) < 1e-6:  
            return c
        elif (4 * c**2 - 12) * (4 * a**2 - 12) < 0:
            b = c
        else:
            a = c
        i += 1
    print('Не вдалося знайти корінь')
print(bisek1(2,-5))
print(bisek1(-2,5))

#Розв'язати алгебраїчне рівняння 4x^2 - 12 = 0 методом Ньютона-Рафсона
def nuton(x):
    f = 4 * x **2 - 12
    f_p = 8*x
    f1 = 1
    while abs(f1) > 0.0001 :
        f_p1 = 8 * x  
        f1 =  4 * x **2 - 12
        x_n = x - (f1/f_p1)
        x = x_n
    print(x)

            

x = float(input('ведіть x:'))
x1 = nuton(x)
print(x1)
x = float(input('ведіть x:'))
x2 = nuton(x) 
print(x2)

#Розв'язати систему лінійних алгебраїчних рівнянь за допомогою
#методу Жордана.
import numpy as np

array1 = np.array([[3, 1, -1, -1],
                   [2, -3, -3, 1],
                   [-3, 2, 2, -4]],dtype=float)
def shordan(array1):
    for i in range(len(array1)) :
        a = array1[i,i]
        array1[i] /= a
        for j in range(len(array1)):
            if i != j :  
                array1[j] -= array1[j,i] * array1[i]
shordan(array1)
print(array1,round(array1[0,3]),round(array1[1,3]),round(array1[2,3]))

#Застосувати метод найменших квадратів для апроксимації функції.
import numpy as np
import matplotlib.pyplot as plt
x = np.array([2,-3,4])
y = np.array([-1,1,-4])
def kvadrat(x,y):
    xc = np.sum(x)/np.shape(x)
    yc = np.sum(y)/np.shape(y)

    i = 0
    ash =0
    az =0
    for i in range(np.shape(x)[0]) :
        ash += (x[i]-xc)*(y[i]-yc)
        az += x[i]**2-xc
    a = ash/az
    b = yc - a*xc
    y_aproks = a*x + b
    print(a,b)

    plt.plot(x,y, 'o',label = ' Дані')
    plt.plot(x,y_aproks, 'r',label = 'Апроксимація')
    plt.legend
    plt.show

kvadrat(x,y)
